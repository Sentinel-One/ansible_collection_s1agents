---
# tasks file for s1_agent_uninstall

- name: Show s1_agent_info
  ansible.builtin.debug:
    var: s1_agent_info

- name: Stop and disable the SentinelOne service | Linux
  ansible.builtin.service:
    name: '{{ s1_service_name }}'
    state: stopped
    enabled: no
  become: yes
  when:
    - s1_agent_info.service_status is defined
    - s1_agent_info.service_status is not none
    - s1_agent_info.service_status | length > 0

- name: Remove the SentinelOne service files | Linux
  ansible.builtin.file:
    path: '{{ item }}'
    state: absent
  become: yes
  with_items:
    - /usr/lib/systemd/system/sentinelone.service
    - /lib/systemd/system/sentinelone.service
    - /etc/init.d/sentineld

- name: Unmount SentinelOne directories | Linux
  ansible.posix.mount:
    path: '{{ item }}'
    state: unmounted
  become: yes
  with_items:
    - '{{ s1_agent_default_install_path }}/mount'
    - '{{ s1_agent_default_install_path }}/cgroups/memory'
    - '{{ s1_agent_default_install_path }}/rpm_mount'

- name: Remove SentinelOne directory | Linux
  ansible.builtin.file:
    path: '{{ item }}'
    state: absent
  become: yes
  with_items:
    - '{{ s1_agent_custom_install_path | default(s1_agent_default_install_path) }}'
    - '{{ s1_agent_default_install_path }}'

- name: Remove the sentinelone user | Linux
  ansible.builtin.user:
    name: sentinelone
    state: absent
    remove: yes
  become: yes

- name: Remove SentinelOne apt package | Linux
  ansible.builtin.file:
    path: /var/lib/dpkg/info/{{ s1_package_name }}.*
    state: absent
  become: yes
  when: ansible_pkg_mgr in apt_pkg_mgrs

- name: Remove the SentinelOne package from dpkg | Linux
  ansible.builtin.command: dpkg --purge --force-all {{ s1_package_name }} # noqa command-instead-of-module
  become: yes
  register: dpkg_remove
  changed_when:
    - '"Purging configuration files for " ~ s1_package_name ~ "" in dpkg_remove.stdout'
  when:
    - ansible_pkg_mgr in apt_pkg_mgrs

- name: Remove the SentinelOne package from rpm | Linux
  ansible.builtin.command: rpm -ev --noscripts {{ s1_package_name }} # noqa command-instead-of-module
  become: yes
  register: rpm_remove
  changed_when:
    - '"Preparing packages...\n" ~ s1_package_name ~ "" in rpm_remove.stdout'
  failed_when:
    - rpm_remove is failed
    - '"package " ~ s1_package_name ~ " is not installed" not in rpm_remove.stderr'
  when:
    - ansible_pkg_mgr in rpm_pkg_mgrs
