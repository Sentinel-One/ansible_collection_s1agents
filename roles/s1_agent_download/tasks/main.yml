---
# tasks file for s1_agent_download
- name: Assert that Management Console is defined
  ansible.builtin.assert:
    that:
      - s1_management_console is defined
      - s1_management_console is not none
      - s1_management_console | length > 0
    fail_msg: s1_management_console is not set
    success_msg: s1_management_console is set
  tags:
    - always

- name: Assert that API token is defined
  ansible.builtin.assert:
    that:
      - s1_api_token is defined
      - s1_api_token is not none
      - s1_api_token | length > 0
    fail_msg: s1_api_token is not set
    success_msg: s1_api_token is set
  tags:
    - always

- name: Show release
  ansible.builtin.debug:
    var: s1_release_n_minus
  tags:
    - never
    - debug

- name: Show architecture
  ansible.builtin.debug:
    var: ansible_architecture
  tags:
    - never
    - debug

- name: Show URL
  ansible.builtin.debug:
    msg: '{{ lookup("template", "packages_url.j2") }}'
  tags:
    - never
    - debug

- name: Get available SentinelOne agent packages
  ansible.builtin.uri:
    url: '{{ lookup("template", "packages_url.j2") }}'
    return_content: false
    headers:
      Authorization: 'ApiToken {{ s1_api_token }}'
    validate_certs: "{{ s1_validate_certs | default('true') | bool }}"
  register: s1_available_packages
  until: s1_available_packages is not failed
  retries: 10
  delay: 10
  delegate_to: localhost
  run_once: true
  become: no

- name: Show s1_agent_version
  ansible.builtin.debug:
    var: s1_agent_version
  tags:
    - never
    - debug

- name: Include tasks for the latest agent release
  ansible.builtin.include_tasks:
    file: release_n_minus.yml
  when: (s1_agent_version is undefined) or (s1_agent_version is none) or (s1_agent_version | length == 0)

- name: Include tasks for a named agent release
  ansible.builtin.include_tasks:
    file: release_named.yml
  when:
    - s1_agent_version is defined
    - s1_agent_version is not none
    - s1_agent_version | length > 0

- name: Set download variables
  ansible.builtin.set_fact:
    s1_agent_package_link: '{{ s1_download_src.link }}'
    s1_agent_package_sha1: '{{ s1_download_src.sha1 }}'
    s1_agent_package_name: '{{ s1_download_src.fileName }}'

- name: Set SentinelOne agent variables
  ansible.builtin.set_fact:
    s1_agent_src: '{{ s1_download_path }}/{{ s1_agent_package_name }}'
    s1_agent_version: '{{ s1_download_src.version }}'

- name: Show package details
  tags:
    - debug
    - never
  block:
    - name: Show s1_agent_package_link
      ansible.builtin.debug:
        var: s1_agent_package_link

    - name: Show s1_agent_package_sha1
      ansible.builtin.debug:
        var: s1_agent_package_sha1

    - name: Show s1_agent_package_name
      ansible.builtin.debug:
        var: s1_agent_package_name

    - name: Show s1_agent_src
      ansible.builtin.debug:
        var: s1_agent_src

    - name: Show s1_agent_version
      ansible.builtin.debug:
        var: s1_agent_version

- name: Create working directory
  ansible.builtin.file:
    path: '{{ s1_download_path }}'
    state: directory
    mode: '0755'
  delegate_to: localhost
  run_once: true
  become: no

- name: Download SentinelOne agent
  ansible.builtin.get_url:
    url: '{{ s1_agent_package_link }}'
    checksum: 'sha1:{{ s1_agent_package_sha1 }}'
    dest: '{{ s1_agent_src }}'
    mode: 440
    headers:
      Authorization: 'ApiToken {{ s1_api_token }}'
    validate_certs: "{{ s1_validate_certs | default('true') | bool }}"
  register: url_result
  until: url_result is not failed
  retries: 10
  delay: 60 # Mgmt Console API is limited to 2 pkg downloads / 60 seconds
  delegate_to: localhost
  become: no
