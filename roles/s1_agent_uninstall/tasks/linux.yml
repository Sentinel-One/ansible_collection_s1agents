---
# tasks file for s1_agent_forced_remove

- name: Gather package facts | Linux
  ansible.builtin.package_facts:
    manager: auto
  # when:
  #   - not s1_forced_remove | default('false') | bool

- name: Uninstall SentinelOne Agent using sentinelctl commands
  block:
    - name: Get the endpoints passphrase | Linux
      include_role:
        name: s1_mgmt_get_passphrase
      when: s1_agent_passphrase is undefined

    - name: Assert that s1_agent_passphrase is set | Linux
      ansible.builtin.assert:
        that:
          - s1_agent_passphrase is defined
          - s1_agent_passphrase is not none
          - s1_agent_passphrase | length > 0
        fail_msg: s1_agent_passphrase is not set
        success_msg: s1_agent_passphrase is set

    - name: Uninstall SentinelOne agent | Linux
      ansible.builtin.command: '/opt/sentinelone/bin/sentinelctl control uninstall --passphrase "{{ s1_agent_passphrase }}"'
      become: yes
      register: s1_sentinectl_uninstall
      retries: 3
      delay: 30
      until: s1_sentinectl_uninstall.rc == 0
  rescue:
    - name: Include tasks to clean up a failed uninstall | Linux
      ansible.builtin.include_tasks:
        file: '{{ loop_cleanup_failed }}'
      with_first_found:
        - files:
            - '{{ ansible_distribution | lower }}_{{ ansible_distribution_version }}_forced_remove.yml'
            - '{{ ansible_distribution | lower }}_{{ ansible_distribution_major_version }}_forced_remove.yml'
            - '{{ ansible_distribution | lower }}_forced_remove.yml'
            - '{{ ansible_os_family | lower }}_forced_remove.yml'
            - '{{ ansible_system | lower }}_forced_remove.yml'
            - 'unsupported.yml'
      loop_control:
        loop_var: loop_cleanup_failed
        label: '{{ loop_cleanup_failed | basename }}'
  when:
    - ansible_facts.packages[s1_package_name] is defined
    - not s1_forced_remove | default('false') | bool

- name: Include tasks to forcibly remove the SeintinelOne agent | Linux
  ansible.builtin.include_tasks:
    file: '{{ loop_forced_remove }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution | lower }}_{{ ansible_distribution_version }}_forced_remove.yml'
        - '{{ ansible_distribution | lower }}_{{ ansible_distribution_major_version }}_forced_remove.yml'
        - '{{ ansible_distribution | lower }}_forced_remove.yml'
        - '{{ ansible_os_family | lower }}_forced_remove.yml'
        - '{{ ansible_system | lower }}_forced_remove.yml'
        - 'unsupported.yml'
  loop_control:
    loop_var: loop_forced_remove
    label: '{{ loop_forced_remove | basename }}'
  when: s1_forced_remove | default('false') | bool
