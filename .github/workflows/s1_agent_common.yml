name: S1 Agent Common
on:
  push:
    branches:
      - 'main'
      - 'feature/windows-support'
    paths:
      - 'roles/s1_agent_common/**'
      - '!roles/s1_agent_common/README.md'
      - '!roles/s1_agent_common/makefile'
      - '.github/workflows/s1_agent_common.yml'
      - 'requirements.yml'
  pull_request:
    branches:
      - 'main'
    paths:
      - 'roles/s1_agent_common/**'
      - '!roles/s1_agent_common/README.md'
      - '!roles/s1_agent_common/makefile'
      - '.github/workflows/s1_agent_common.yml'
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  molecule-test:
    name: '${{ matrix.boxes.distribution }} (â’¶ ${{ matrix.versions.ansible }})'
    runs-on: [self-hosted, Linux, X64, ansible-collection]
    env:
      ANSIBLE_FORCE_COLOR: 1 # allows ansible colors to be passed to GitHub Actions
      PY_COLORS: 1 # allows molecule colors to be passed to GitHub Actions
      S1_AGENT_SITE_TOKEN: ${{ secrets.S1_AGENT_SITE_TOKEN }}
      S1_API_TOKEN: ${{ secrets.S1_API_TOKEN }}
      S1_MANAGEMENT_CONSOLE: https://usea1-support3.sentinelone.net
      S1_MOLECULE_HOSTNAME: falling-lab
      VAGRANT_DEFAULT_PROVIDER: virtualbox
      VAGRANT_HOME: /opt/hostedtoolcache/Vagrant
    strategy:
      fail-fast: false
      matrix:
        boxes:
          - distribution: opensuse15
            repository: roboxes
            connection: ssh
          - distribution: rocky8
            repository: roboxes
            connection: ssh
          - distribution: ubuntu2204
            repository: roboxes
            connection: ssh
          - distribution: windows-server-2022-standard
            repository: gusztavvargadr
            connection: ssh
            group: Windows
          - distribution: WindowsServer2012R2
            repository: jborean93
            connection: winrm
        scenario-name:
          - default
          - winrm_default
        versions:
          # ansible-core upstream development supports 3 releases at a time
          # https://docs.ansible.com/ansible/latest/reference_appendices/release_and_maintenance.html
          - ansible: stable-2.12 # EOL 2023-05-23
            python: '3.10'
          - ansible: stable-2.13 # EOL 2023-11-06
            python: '3.10'
          - ansible: stable-2.14 # EOL 2024-05-20
            python: '3.10'
        exclude:
          # OpenSSH is not supported on Windows Server 2012r2. We need to use
          # custom scenarios configured for winrm connections. Exclude normal
          # scenarios for winrm connections and winrm_* scenarios for ssh
          # connections.
          - { boxes: { connection: winrm }, scenario-name: default }
          - { boxes: { connection: ssh }, scenario-name: winrm_default }
        include:
          # ansible-core versions newer than 2.12 require python 2.7, which is not
          # available out of the box in RedHat/CentOS 6. We include centos6 here,
          # instead of in the matrix, so that it is only tested once against the
          # last supported version of ansible-core (2.12). CentOS 6 will continue
          # to be tested against ansible-core-2.12 until CentOS 6 is deprecated
          # or a better solution presents itself.
          - {
              boxes: { distribution: centos6, repository: roboxes },
              scenario-name: default,
              versions: { ansible: stable-2.12, python: '3.10' },
            }
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.versions.python }}

      - name: Install ansible-core (${{ matrix.versions.ansible }})
        run: |
          pip install https://github.com/ansible/ansible/archive/${{ matrix.versions.ansible }}.tar.gz --disable-pip-version-check

      - name: Install requirements for molecule tests
        run: |
          pip install molecule_vagrant yamllint ansible-lint flake8 pywinrm --disable-pip-version-check
          if [ -f requirements.txt ]; then pip install -r requirements.txt --disable-pip-version-check; fi

      - name: Set environment
        run: |
          DISTRIBUTION=${{ matrix.boxes.distribution }}
          REPOSITORY=${{ matrix.boxes.repository }}
          GROUP=${{ matrix.boxes.group }}
          echo "S1_VAGRANT_DISTRO=${DISTRIBUTION}" >> $GITHUB_ENV
          echo "S1_VAGRANT_REPO=${REPOSITORY}" >> $GITHUB_ENV
          if [ -n "$GROUP" ]; then echo "S1_VAGRANT_GROUP=${GROUP}" >> $GITHUB_ENV; fi

      - name: Assert that variables are defined
        if: ${{ (env.S1_VAGRANT_DISTRO == '') || (env.S1_VAGRANT_REPO == '') }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('S1_VAGRANT_DISTRO and S1_VAGRANT_REPO are not set!')

      - name: Execute Molecule Scenarios
        if: success()
        run: >-
          echo ${PWD} &&
          molecule --version &&
          ansible --version &&
          molecule test --scenario-name ${{ matrix.scenario-name }}
        working-directory: ./roles/s1_agent_common

  verify-test:
    needs: molecule-test # run after molecule-test
    runs-on: [self-hosted, Linux, X64, ansible-collection]
    if: success() # only run when all molecule-test have passed
    # store success output flag for assert-passed job
    outputs:
      success: ${{ steps.setoutput.outputs.success }}
    steps:
      - id: setoutput
        run: echo "success=true" >> $GITHUB_OUTPUT

  assert-passed:
    runs-on: [self-hosted, Linux, X64, ansible-collection]
    if: always() # always run, so we never skip the check
    needs: [molecule-test, verify-test]
    steps:
      # pass step only when output of previous verify-test job is set
      # in case at least one of the shard fails, verify-test is skipped
      # and the output will not be set, which will then cause the assert-passed job to fail
      - run: |
          passed="${{ needs.verify-test.outputs.success }}"
          if [[ $passed == "true" ]]; then
            echo "molecule-test passed"
            exit 0
          else
            echo "molecule-test failed"
            exit 1
          fi
